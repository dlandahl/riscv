
reduce :: combinational (mask: constant | value: wire[8]) -> result: wire {
    result = ~(^(value & mask));
}

Lfsr_Updown :: chip (clk: wire, reset: wire, enable: wire, up_down: wire) -> (count: flipflop[8], overflow: wire) {

    combinational
        if up_down  overflow = count == 8'b0000_0001;
        else        overflow = count == 8'b1000_0000;

    sequential (clk) if reset {
        count <= 8'b0;
    } else if enable {
        if up_down {
            count <= { reduce('b0110_0011, count), count[7:1] };
        } else {
            count <= { count[6:0], reduce('b1011_0001, count) };
        }
    }
}

testbench {
    using lfsr := instantiate(Lfsr_Updown);

    register_sim_callback(#code {
        lfsr.in.clk = !lfsr.in.clk;
    });

    in.clk = 0;
    in.reset = 1;
    in.enable = 0;
    in.up_down = 0;

    for 1..10 step_simulation();

    in.reset = 0;
    step_simulation();

    in.enable = 1;
    for 1..20 step_simulation();

    in.up_down = 1;
    for 1..30 step_simulation();

    log("State: %", lfsr);
    testbench_assert(out.count == 0x1233);
}
