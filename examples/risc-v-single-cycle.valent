
Processor :: module (
    clock: wire,
    reset: wire,
    instruction: wire[RiscV_Instruction],
    data_in: wire[64]
) -> (
    pc: flipflop[64],
    bus: wire[Memory_Interface],
) {
    // Alternate cycles for instruction execution and waiting for memory latency

    Mode :: enum[1] { EXECUTE; MEMORY; }
    mode: flipflop[Mode];

    sequential (clock) {
        if reset mode <- Mode.EXECUTE;
        else     mode <- !mode;
    }

    RiscV_Instruction :: register[32] {
        opcode    [Opcode];
        dest_reg  [5];
        funct3    [Funct];
        src_reg1  [5];
        src_reg2  [5];
        funct7    [7];
    }

    opcode: wire[Opcode];
    combinational opcode = instruction.opcode;



    imm: wire[64];

    I_immediate: wire[64];
    S_immediate: wire[64];
    B_immediate: wire[64];
    U_immediate: wire[64];
    J_immediate: wire[64];

    op: wire[32];
    combinational {

        op = instruction;

        I_immediate = { 53 # op[31], op[30:20] };
        S_immediate = { 53 # op[31], op[30:25], op[11:7] };
        B_immediate = { 52 # op[31], op[7], op[30:25], op[11:8], 1'b0 };
        U_immediate = { 33 # op[31], op[30:12], 12'b0 };
        J_immediate = { 44 # op[31], op[19:12], op[20], op[30:25], op[24:21], 1'b0 };

        imm = 0;
        switch instruction.opcode {
            case Opcode.AUIPC  imm = U_immediate;
            case Opcode.LUI    imm = U_immediate;
            case Opcode.LOAD   imm = I_immediate;
            case Opcode.STORE  imm = S_immediate;
            case Opcode.OP_IMM imm = I_immediate;
            case Opcode.OP_IMM_32 imm = I_immediate;
            case Opcode.OP     imm = 64'b0;
            case Opcode.OP_32  imm = 64'b0;
            case Opcode.BRANCH imm = B_immediate;
            case Opcode.JAL    imm = J_immediate;
            case Opcode.JALR   imm = J_immediate;
        }
    }



    pc_next: wire[64 + 1];

    sequential (clock) {
        if mode == Mode.EXECUTE {
            pc <-,trunc pc_next;
        }

        if reset pc <- 0;
    }

    branch_taken: wire;

    combinational {
        branch_taken = alu_result == 1;

        if opcode == Opcode.JAL {
            pc_next = pc + imm;
        } else if opcode == Opcode.JALR {
            pc_next = pc + alu_result;
        } else if opcode == Opcode.BRANCH && branch_taken {
            pc_next = pc + imm;
        } else {
            pc_next = pc + 4;
        }
    }



    register_file: [32] memory[64];

    sequential (clock) if !reset {
        if mode == Mode.EXECUTE {
            switch (opcode) {
                case Opcode.OP        register_file[rd] <- alu_result;
                case Opcode.OP_IMM    register_file[rd] <- alu_result;
                case Opcode.OP_32     register_file[rd] <- { 32 # alu_result[31], alu_result[31:0] };
                case Opcode.OP_IMM_32 register_file[rd] <- { 32 # alu_result[31], alu_result[31:0] };
                case Opcode.LUI       register_file[rd] <- imm;
                case Opcode.AUIPC     register_file[rd] <-,trunc imm + pc;
            }
        }

        if mode == Mode.MEMORY {
            if opcode == Opcode.LOAD switch instruction.funct3 {
                case Funct.LOAD_LB  register_file[rd] <- { 56 # data_in[8  + offset +: 1], data_in[offset +: 8]  };
                case Funct.LOAD_LH  register_file[rd] <- { 48 # data_in[16 + offset +: 1], data_in[offset +: 16] };
                case Funct.LOAD_LW  register_file[rd] <- { 32 # data_in[32 + offset +: 1], data_in[offset +: 32] };
                case Funct.LOAD_LD  register_file[rd] <- data_in;
                case Funct.LOAD_LBU register_file[rd] <- { 56'b0, data_in[offset +: 8] };
                case Funct.LOAD_LHU register_file[rd] <- { 48'b0, data_in[offset +: 16] };
                case Funct.LOAD_LWU register_file[rd] <- { 32'b0, data_in[offset +: 32] };
            }
        }
    }

    rs1: wire[64];
    rs2: wire[64];
    rd:  wire[5];

    combinational {
        rd  = instruction.dest_reg;
        rs1 = register_file[instruction.src_reg1];
        rs2 = register_file[instruction.src_reg2];
    }



    byte_offset: wire[3];
    offset:      wire[6];

    combinational {
        bus.write_enable = 8'b0;

        byte_offset = alu_result[2:0];
        offset      = byte_offset * 8;

        if mode == Mode.EXECUTE && opcode == Opcode.STORE {
            switch instruction.funct3 {
                case Funct.STORE_SB bus.write_enable = 8'b01 << byte_offset;
                case Funct.STORE_SH bus.write_enable = 8'b11 << byte_offset;
                case Funct.STORE_SW bus.write_enable = 8'h0f << byte_offset;
                case Funct.STORE_SD bus.write_enable = 8'hff;
            }
        }

        bus.address = { alu_result[63:3], 3'b0 };
        bus.data = rs2 << offset;
    }



    alu_result: wire[64];
    alu_lhs: wire[64];
    alu_rhs: wire[64];

    use_immediate: wire;
    funct7: wire;

    combinational {
        alu_lhs = rs1;

        use_immediate = opcode == Opcode.OP_IMM
                     || opcode == Opcode.OP_IMM_32
                     || opcode == Opcode.LOAD
                     || opcode == Opcode.STORE
                     || opcode == Opcode.JALR;

        if use_immediate {
            alu_rhs = imm;
        } else {
            alu_rhs = rs2;
        }

        alu_result =,trunc alu_lhs + alu_rhs;
        funct7 = instruction.funct7 > 0 && !use_immediate;

        if opcode == Opcode.OP || opcode == Opcode.OP_IMM || opcode == Opcode.OP_32 || opcode == Opcode.OP_IMM_32 {
            switch instruction.funct3 {
                case Funct.OP_ADD_SUB
                    if funct7      alu_result       = alu_lhs -  alu_rhs;
                    else           alu_result =,trunc alu_lhs +  alu_rhs;
                case Funct.OP_SRL_SRA
                    if funct7      alu_result       = alu_lhs >>> alu_rhs;
                    else           alu_result       = alu_lhs >> alu_rhs;
                case Funct.OP_SLL  alu_result       = alu_lhs << alu_rhs;
                case Funct.OP_SLT  alu_result[0]    = alu_lhs <  alu_rhs; // Todo: sign
                case Funct.OP_SLTU alu_result[0]    = alu_lhs <  alu_rhs;
                case Funct.OP_XOR  alu_result       = alu_lhs ^  alu_rhs;
                case Funct.OP_OR   alu_result       = alu_lhs |  alu_rhs;
                case Funct.OP_AND  alu_result       = alu_lhs &  alu_rhs;
            }
        }

        else if opcode == Opcode.BRANCH switch instruction.funct3 {
            case Funct.BRANCH_BEQ  alu_result = { 63'b0, alu_lhs == alu_rhs };
            case Funct.BRANCH_BNE  alu_result = { 63'b0, alu_lhs != alu_rhs };
            case Funct.BRANCH_BLT  alu_result = { 63'b0, alu_lhs <  alu_rhs }; // Todo: sign
            case Funct.BRANCH_BGE  alu_result = { 63'b0, alu_lhs >= alu_rhs }; // Todo: sign
            case Funct.BRANCH_BLTU alu_result = { 63'b0, alu_lhs <  alu_rhs };
            case Funct.BRANCH_BGEU alu_result = { 63'b0, alu_lhs >= alu_rhs };
        }
    }
}

Controller :: module (clock: wire, reset: wire, switches: wire[16], buttons: wire[4]) -> (leds: flipflop[16], uart_tx: wire) {

    processor: Processor(clock, reset);
    storage: Block_Ram(clock);

    combinational {
        storage.port_a = processor.bus;

        processor.data_in = storage.port_a_out; // Todo add default cases

        switch processor.bus.address {
            case MMIO_ADDRESS_SWITCHES processor.data_in = { 48'b0, switches };
            case MMIO_ADDRESS_UART     processor.data_in = { 55'b0, uart.ready, 8'b0 };
            case MMIO_ADDRESS_BUTTONS  processor.data_in = { 60'b0, buttons };
        }

        // Because instructions are 32bit but the memory bus is 64bit, the PC will sometimes point to the high bits in the instruction bus.
        processor.instruction = (storage.port_b_out)[high_pc_flag * 32 +: 32];

        storage.port_b = 0;
        storage.port_b.address = processor.pc;
    }

    high_pc_flag: flipflop;

    // Delay the PC low/high toggle so that it lines up with what instruction has actually been fetched yet. After the PC changes it still takes a cycle to load the new instruction.
    sequential (clock) {
        high_pc_flag <- (processor.pc)[2];
    }



    MMIO_ADDRESS_SWITCHES :: 'h100;
    MMIO_ADDRESS_LEDS     :: 'h108;
    MMIO_ADDRESS_UART     :: 'h110;
    MMIO_ADDRESS_BUTTONS  :: 'h118;

    sequential (clock) {
        uart_send <- 0;

        if (processor.bus.write_enable)[1:0] == 2'b11 {
            switch processor.bus.address {
                case MMIO_ADDRESS_LEDS
                    leds      <- (processor.bus.data)[15:0];
                case MMIO_ADDRESS_UART {
                    uart_data <- (processor.bus.data)[7:0];
                    uart_send <- (processor.bus.data)[9];
                }
            }
        }

        if reset {
            leds <- 0;
        }
    }

    uart: Uart_Tx_Ctrl(clock, uart_send, uart_data);
    combinational uart_tx = uart.uart_tx; // Todo allow passing parameters by name

    // Todo, allow registered module inputs
    uart_send: flipflop;
    uart_data: flipflop[8];
}

Memory_Interface :: register {
    address[64];
    data[64];
    write_enable[8];
}

Block_Ram :: module (
    clock: wire,

    port_a: wire[Memory_Interface],
    port_b: wire[Memory_Interface],
) -> (
    port_a_out: flipflop[64],
    port_b_out: flipflop[64],
) {
    // 2-port BRAM, port A is used for data, port B for instructions

    storage: ['h200] memory[64];

    native_address_a: wire[61];
    native_address_b: wire[61];

    combinational {
        native_address_a = (port_a.address)[63:3];
        native_address_b = (port_b.address)[63:3];
    }

    sequential (clock) {
        if (port_a.write_enable)[0] storage[native_address_a][7:0]   <- (port_a.data)[7:0];
        if (port_a.write_enable)[1] storage[native_address_a][15:8]  <- (port_a.data)[15:8];
        if (port_a.write_enable)[2] storage[native_address_a][23:16] <- (port_a.data)[23:16];
        if (port_a.write_enable)[3] storage[native_address_a][31:24] <- (port_a.data)[31:24];

        if (port_a.write_enable)[4] storage[native_address_a][39:32] <- (port_a.data)[39:32];
        if (port_a.write_enable)[5] storage[native_address_a][47:40] <- (port_a.data)[47:40];
        if (port_a.write_enable)[6] storage[native_address_a][55:48] <- (port_a.data)[55:48];
        if (port_a.write_enable)[7] storage[native_address_a][63:56] <- (port_a.data)[63:56];
    }

    sequential (clock) {
        if (port_b.write_enable)[0] storage[native_address_b][7:0]   <- (port_b.data)[7:0];
        if (port_b.write_enable)[1] storage[native_address_b][15:8]  <- (port_b.data)[15:8];
        if (port_b.write_enable)[2] storage[native_address_b][23:16] <- (port_b.data)[23:16];
        if (port_b.write_enable)[3] storage[native_address_b][31:24] <- (port_b.data)[31:24];

        if (port_b.write_enable)[4] storage[native_address_b][39:32] <- (port_b.data)[39:32];
        if (port_b.write_enable)[5] storage[native_address_b][47:40] <- (port_b.data)[47:40];
        if (port_b.write_enable)[6] storage[native_address_b][55:48] <- (port_b.data)[55:48];
        if (port_b.write_enable)[7] storage[native_address_b][63:56] <- (port_b.data)[63:56];
    }

    // In Vivado synthesis, different reads from the same memory should be in separate blocks. In the future should do this automatically in the backend
    sequential (clock) port_b_out <- storage[native_address_b];
    sequential (clock) port_a_out <- storage[native_address_a];
}

Opcode :: enum[7] {
    AUIPC     :: 'b00_101_11;
    LUI       :: 'b01_101_11;
    LOAD      :: 'b00_000_11;
    STORE     :: 'b01_000_11;
    OP_IMM    :: 'b00_100_11;
    OP        :: 'b01_100_11;
    OP_IMM_32 :: 'b00_110_11;
    OP_32     :: 'b01_110_11;
    BRANCH    :: 'b11_000_11;
    JALR      :: 'b11_001_11;
    JAL       :: 'b11_011_11;
}

Funct :: enum[3] {
    OP_ADD_SUB  :: 'b000;
    OP_SLL      :: 'b001;
    OP_SLT      :: 'b010;
    OP_SLTU     :: 'b011;
    OP_XOR      :: 'b100;
    OP_SRL_SRA  :: 'b101;
    OP_OR       :: 'b110;
    OP_AND      :: 'b111;

    BRANCH_BEQ  :: 'b000;
    BRANCH_BNE  :: 'b001;
    BRANCH_BLT  :: 'b100;
    BRANCH_BGE  :: 'b101;
    BRANCH_BLTU :: 'b110;
    BRANCH_BGEU :: 'b111;

    LOAD_LB     :: 'b000;
    LOAD_LH     :: 'b001;
    LOAD_LW     :: 'b010;
    LOAD_LD     :: 'b011;
    LOAD_LBU    :: 'b100;
    LOAD_LHU    :: 'b101;
    LOAD_LWU    :: 'b110;

    STORE_SB    :: 'b000;
    STORE_SH    :: 'b001;
    STORE_SW    :: 'b010;
    STORE_SD    :: 'b011;
}

Uart_Tx_Ctrl :: module (
    clock: wire,
    send: wire,
    data: wire[8]
  ) -> (
    ready: wire,
    uart_tx: flipflop
  ) {

    Uart_Frame :: register {
        stop_bit;
        data[8];
        start_bit;
    }

    tx_data: flipflop[Uart_Frame];

    // When `send` goes high, latch signal to be sent into the `tx_data` register
    sequential (clock) {
        if send tx_data <- { 1'b1, data, 1'b0 };
    }


    Tx_State :: enum[2] {
       RDY;
       LOAD_BIT;
       SEND_BIT;
    }

    tx_state: flipflop[Tx_State];

    // Keep track of the current send state (wait for baud, send, standby)
    // and update the output transfer value
    sequential (clock) {
        switch tx_state {
            case Tx_State.RDY {
                uart_tx <- 1;
                if send tx_state <- Tx_State.LOAD_BIT;
            }

            case Tx_State.LOAD_BIT {
                uart_tx <- (tx_data >> bit_index)[0];
                tx_state <- Tx_State.SEND_BIT;
            }

            case Tx_State.SEND_BIT {
                if baud_done {
                    if bit_index == BIT_INDEX_MAX
                        tx_state <- Tx_State.RDY;
                    else
                        tx_state <- Tx_State.LOAD_BIT;
                }
            }
        }
    }

    combinational ready = tx_state == Tx_State.RDY;


    // Track which bit of tx_data should currently be sent
    BIT_INDEX_MAX :: 10;
    bit_index: flipflop[4];

    sequential (clock) {
        switch tx_state {
            case Tx_State.RDY      bit_index <- 0;
            case Tx_State.LOAD_BIT bit_index <-,trunc bit_index + 1;
        }
    }


    // Counter to wait for the baud period
    BAUD_TIMER_MAX :: 14'10416;

    baud_timer: flipflop[14];
    baud_done: wire;
    combinational baud_done = baud_timer == BAUD_TIMER_MAX;

    sequential (clock) {
        if tx_state == Tx_State.RDY || baud_done {
            baud_timer <- 0;
        } else {
            baud_timer <-,trunc baud_timer + 1;
        }
    }
}
