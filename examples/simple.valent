
Fixed :: register <int_bits, fract_bits> {
    int[int_bits];
    fract[fract_bits];
}

add :: combinational (a: wire[Fixed], b: wire[a.int_bits]) -> result: wire[Fixed] {
    result = {trunc b + a.int, a.fract};
}

Float :: register[32] {
    sign;
    exponent[8];
    mantissa[23];
}

Xmm :: register[128] {
    f0[Float];
    f1[Float];
    f2[Float];
    f3[Float];
}

clb :: combinational (a: wire[], b: wire[], c: wire[], d: wire[]) -> q: wire[] {
    q = (a & b) | (~c & d);
}

Adder :: module (a: wire[8], b: wire[8]) -> c: wire[8] {
    combinational
        c = trunc a + b;

    testbench {
        for Adder.inputs  Basic.print("Found port %: %", it.name, it.type);
        for Adder.outputs Basic.print("Found port %: %", it.name, it.type);
    }
}

Square_Wave :: module (clock: wire, reset: wire, period: wire[]) -> wave: flipflop {
    counter: flipflop[period.width];

    sequential (clock) if reset {
        counter <= 0;
    } else {
        {12 # 1'bZ, counter} <= counter + 1;

        if counter == period {
            counter <= 0;
            wave <= !wave;
        }
    }

    testbench {
        dut := instantiate(Square_Wave);

        Run_Simulation({
            using simulation;
            dut.clock = !dut.clock;
        });
    }
}
