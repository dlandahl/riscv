
RiscV_Instruction :: register[32] {
    opcode    [Opcode];
    dest      [5];
    funct3    [Funct];
    source_a  [5];
    source_b  [5];
    funct7    [7];
}

// PR = Pipeline Register.
PR_Fetch :: register {
    instruction [RiscV_Instruction];
}

PR_Decode :: register {
    instruction [RiscV_Instruction];

    immediate [64];
    source_a  [64];
    source_b  [64];
}

PR_Execute :: register {
    instruction [RiscV_Instruction];

    immediate   [64];
    alu         [64];
    source_b    [64];
}

PR_Memory :: register {
    instruction [RiscV_Instruction];

    immediate   [64];
    alu_result  [64];
    source_b    [64];
}

Processor :: module (
    clock: wire,
    instruction: wire[64],
    data: wire[64]
) -> (
    pc: flipflop[64],
    write_enable: wire[8],
    data_out: wire[64],
    address: wire[64],
) {

    register_file: [32] memory[64];
    // There's no data bypassing logic. Stall whenever a dependent register is in flight.
    in_flight: flipflop[32];

    flush: wire;
    stall: wire;

    bubble :: 64'b0;

    // ===============
    pr_fetch: flipflop[PR_Fetch];
    // ===============

    sequential (clock) {
        if !stall {
            pc <- pc + 4;
            PR_fetch.instruction <- instruction;
        }
    }

    // ===============
    pr_decode: flipflop[PR_Decode];
    // ===============

    imdec: Immediate_Decoder(pr_fetch.instruction);

    sequential (clock) {
        pr_decode.immediate   <- imdec.output;

        pr_decode.source_a    <- register_file[pr_fetch.instruction.source_a];
        pr_decode.source_b    <- register_file[pr_fetch.instruction.source_b];

        pr_decode.instruction <- pr_fetch.instruction;

        // If this instruction reads a register, and that register is in flight, stall until it no longer is.
        if is_register_file_read {
            if in_flight[pr_fetch.instruction.source_a] || in_flight[pr_fetch.instruction.source_b] {
                pr_decode.instruction <- bubble;
            }

            in_flight[pr_fetch.instruction.dest] <- 1;
        }
    }

    is_register_file_read: wire;

    combinational {
        is_register_file_read =
               (pr_fetch.instruction.opcode != 0)
            && (pr_fetch.instruction.opcode != Opcode.LUI)
            && (pr_fetch.instruction.opcode != Opcode.JAL);

        if in_flight[pr_fetch.instruction.source_a] || in_flight[pr_fetch.instruction.source_b] {
            // Todo, some instructions use source register A but not B.
            stall = 1;
        }
    }

    // ===============
    pr_execute: flipflop[PR_Execute];
    // ===============

    alu: Arithmetic_Logic_Unit;

    combinational {
        inst := pr_decode.instruction;

        use_immediate =
               inst.opcode == Opcode.OP_IMM
            || inst.opcode == Opcode.OP_IMM_32
            || inst.opcode == Opcode.LOAD
            || inst.opcode == Opcode.STORE
            || inst.opcode == Opcode.JALR;

        alu.op = {
            inst.opcode,
            inst.funct3,
            inst.funct7 != 0 && !use_immediate,
        };

        alu.lhs = pr_decode.source_a;

        if use_immediate {
            alu.rhs = pr_decode.immediate;
        } else {
            alu.rhs = pr_decode.source_b;
        }
    }

    sequential (clock) {
        pr_execute <- {
            pr_decode.instruction,
            pr_decode.immediate;
            alu.result,
            pr_decode.source_b,
        };
    }

    // ===============
    pr_memory: flipflop[PR_Memory];
    // ===============

    byte_offset: wire[3];
    offset:      wire[6];

    combinational {
        write_enable = 8'b0;

        byte_offset = pr_execute.alu_result[2:0];
        offset      = byte_offset * 8;

        if !pr_execute.stall {
            if pr_execute.instruction.opcode == Opcode.STORE {
                switch pr_execute.instruction.funct3 {
                    case Funct.STORE_SB write_enable = 8'b01 << byte_offset;
                    case Funct.STORE_SH write_enable = 8'b11 << byte_offset;
                    case Funct.STORE_SW write_enable = 8'h0f << byte_offset;
                    else                write_enable = 8'hff;
                }
            }
        }

        address  = { pr_execute.alu_result[63:3], 3'b0 };
        data_out = pr_execute.source_b << offset;
    }

    sequential (clock) {
        dest := pr_execute.instruction.dest;

        switch (pr_execute.instruction.opcode) {
            case Opcode.OP        register_file[dest] <- pr_execute.alu;
            case Opcode.OP_IMM    register_file[dest] <- pr_execute.alu;
            case Opcode.OP_32     register_file[dest] <- { 32 # pr_execute.alu[31], pr_execute.alu[31:0] };
            case Opcode.OP_IMM_32 register_file[dest] <- { 32 # pr_execute.alu[31], pr_execute.alu[31:0] };
            case Opcode.LUI       register_file[dest] <- pr_excute.immediate;
            case Opcode.AUIPC     register_file[dest] <-,trunc pr_excute.immediate + pc;
        }

        if pr_execute.instruction.opcode == Opcode.LOAD switch pr_execute.instruction.funct3 {
            case Funct.LOAD_LB  register_file[dest] <- { 56 # data[8  + offset +: 1], data[offset +: 8]  };
            case Funct.LOAD_LH  register_file[dest] <- { 48 # data[16 + offset +: 1], data[offset +: 16] };
            case Funct.LOAD_LW  register_file[dest] <- { 32 # data[32 + offset +: 1], data[offset +: 32] };
            case Funct.LOAD_LD  register_file[dest] <- data;
            case Funct.LOAD_LBU register_file[dest] <- { 56'b0, data[offset +: 8] };
            case Funct.LOAD_LHU register_file[dest] <- { 48'b0, data[offset +: 16] };
            case Funct.LOAD_LWU register_file[dest] <- { 32'b0, data[offset +: 32] };
        }

        in_flight[dest] <- 0;
    }

    sequential (clock) {
        pr_memory <- pr_execute;
    }
}



Immediate_Decoder :: module (inst: wire[RiscV_Instruction]) -> output: wire[64] {

    combinational {

        I_immediate := { 53 # inst[31], inst[30:20] };
        S_immediate := { 53 # inst[31], inst[30:25], inst[11:7] };
        B_immediate := { 52 # inst[31], inst[7], inst[30:25], inst[11:8], 1'b0 };
        U_immediate := { 33 # inst[31], inst[30:12], 12'b0 };
        J_immediate := { 44 # inst[31], inst[19:12], inst[20], inst[30:25], inst[24:21], 1'b0 };

        switch instruction.opcode {
            case Opcode.AUIPC     output = U_immediate;
            case Opcode.LUI       output = U_immediate;
            case Opcode.LOAD      output = I_immediate;
            case Opcode.STORE     output = S_immediate;
            case Opcode.OP_IMM    output = I_immediate;
            case Opcode.OP_IMM_32 output = I_immediate;
            case Opcode.OP        output = 64'b0;
            case Opcode.OP_32     output = 64'b0;
            case Opcode.BRANCH    output = B_immediate;
            case Opcode.JAL       output = J_immediate;
            case Opcode.JALR      output = J_immediate;
            else                  output = 0;
        }
    }
}

Arithmetic_Logic_Unit :: module (op: wire[Operation], lhs: wire[64], rhs: wire[64]) -> result: wire[64] {

    Operation :: register {
        opcode [Opcode];
        funct3 [3]
        funct7;
    }

    combinational {
        is_op := op.opcode == Opcode.OP
              || op.opcode == Opcode.OP_IMM
              || op.opcode == Opcode.OP_32
              || op.opcode == Opcode.OP_IMM_32;

        is_branch := op.opcode == Opcode.BRANCH;

        if is_op switch op.funct3 {
            case Funct.OP_ADD_SUB
                if op.funct7   result       = lhs -  rhs;
                else           result =,trunc lhs +  rhs;
            case Funct.OP_SRL_SRA
                if op.funct7   result       = lhs >>> rhs;
                else           result       = lhs >> rhs;
            case Funct.OP_SLL  result       = lhs << rhs;
            case Funct.OP_SLT  result[0]    = lhs <  rhs; // Todo: sign
            case Funct.OP_SLTU result[0]    = lhs <  rhs;
            case Funct.OP_XOR  result       = lhs ^  rhs;
            case Funct.OP_OR   result       = lhs |  rhs;
            case Funct.OP_AND  result       = lhs &  rhs;
            else               result =,trunc lhs +  rhs;
        }

        else if is_branch switch op.funct3 {
            case Funct.BRANCH_BEQ  result = { 63'b0, lhs == rhs };
            case Funct.BRANCH_BNE  result = { 63'b0, lhs != rhs };
            case Funct.BRANCH_BLT  result = { 63'b0, lhs <  rhs }; // Todo: sign
            case Funct.BRANCH_BGE  result = { 63'b0, lhs >= rhs }; // Todo: sign
            case Funct.BRANCH_BLTU result = { 63'b0, lhs <  rhs };
            case Funct.BRANCH_BGEU result = { 63'b0, lhs >= rhs };
            else                   result = 0;
        }

        else result =,trunc lhs + rhs;
    }
}







Opcode :: enum[7] {
    AUIPC     :: 'b00_101_11;
    LUI       :: 'b01_101_11;
    LOAD      :: 'b00_000_11;
    STORE     :: 'b01_000_11;
    OP_IMM    :: 'b00_100_11;
    OP        :: 'b01_100_11;
    OP_IMM_32 :: 'b00_110_11;
    OP_32     :: 'b01_110_11;
    BRANCH    :: 'b11_000_11;
    JALR      :: 'b11_001_11;
    JAL       :: 'b11_011_11;
}

Funct :: enum[3] {
    OP_ADD_SUB  :: 'b000;
    OP_SLL      :: 'b001;
    OP_SLT      :: 'b010;
    OP_SLTU     :: 'b011;
    OP_XOR      :: 'b100;
    OP_SRL_SRA  :: 'b101;
    OP_OR       :: 'b110;
    OP_AND      :: 'b111;

    BRANCH_BEQ  :: 'b000;
    BRANCH_BNE  :: 'b001;
    BRANCH_BLT  :: 'b100;
    BRANCH_BGE  :: 'b101;
    BRANCH_BLTU :: 'b110;
    BRANCH_BGEU :: 'b111;

    LOAD_LB     :: 'b000;
    LOAD_LH     :: 'b001;
    LOAD_LW     :: 'b010;
    LOAD_LD     :: 'b011;
    LOAD_LBU    :: 'b100;
    LOAD_LHU    :: 'b101;
    LOAD_LWU    :: 'b110;

    STORE_SB    :: 'b000;
    STORE_SH    :: 'b001;
    STORE_SW    :: 'b010;
    STORE_SD    :: 'b011;
}
