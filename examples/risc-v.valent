
Opcode :: enum[7] {
    auipc  :: b00_101_11;
    lui    :: b01_101_11;
    load   :: b00_000_11;
    store  :: b01_000_11;
    op_imm :: b00_100_11;
    op     :: b01_100_11;
    branch :: b11_000_11;
    jalr   :: b11_001_11;
    jal    :: b11_011_11;
}

Funct :: enum[3] {
    op_add_sub  :: b000;
    op_sll      :: b001;
    op_slt      :: b010;
    op_sltu     :: b011;
    op_xor      :: b100;
    op_srl_sra  :: b101;
    op_or       :: b110;
    op_and      :: b111;

    branch_beq  :: b000;
    branch_bne  :: b001;
    branch_blt  :: b010;
    branch_bge  :: b011;
    branch_bltu :: b100;
    branch_bgeu :: b101;

    load_lb     :: b000;
    load_lh     :: b001;
    load_lw     :: b010;
    load_lbu    :: b100;
    load_lhu    :: b101;

    store_sb    :: b000;
    store_sh    :: b001;
    store_sw    :: b010;
}

Risc :: chip (clock: input, reset: input) {

    Exec_Stage :: enum[3] {
        FETCH;
        DECODE;
        EXECUTE;
        MEMORY;
        WRITEBACK;
    }

    stage: flipflop[Exec_Stage];

    sequential (clock) {
        stage <= stage + 1;

        if stage == .WRITEBACK {
            stage <= .FETCH;
        }
    }

    RiscV_Inst :: register[32] {
        opcode    [Opcode];
        dest_reg  [5];
        funct     [Funct];
        src_reg1  [5];
        src_reg2  [5];
        immediate [7];
    }

    curr_inst: flipflop[RiscV_Inst];
    ram: Block_Ram(clock);

    sequential (clock) {
        switch stage {
          case .FETCH:
            curr_inst <= cast(RiscV_Inst) ram.data_out;

          case .DECODE:
            curr_inst <= ram.data_out;
        }
    }
}

Block_Ram :: chip (
    clock: wire,
    wr_en: wire[4],
    address: wire[32],
    data_in: wire[32]
  ) -> (
    data_out: flipflop[32]
  ) {

    bram: memory[32] [0'h400];

    generate {
        init_memory_from_file("bram", "program.mem");
    }

    sequential (clock) {
        if wr_en[0]  memory[address][7:0]   <= data_in[7:0];
        if wr_en[1]  memory[address][15:8]  <= data_in[15:8];
        if wr_en[2]  memory[address][23:16] <= data_in[23:16];
        if wr_en[3]  memory[address][31:24] <= data_in[31:24];

        data_out <= memory[addr];
    }
}
